// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String             @id @default(uuid())
  clerkUserId       String             @unique
  cvs               CV[]
  interviewSessions InterviewSession[]

  @@map("users")
}

model CV {
  id        String   @id @default(uuid())
  userId    String
  title     String
  summary   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user             User               @relation(fields: [userId], references: [id])
  experiences      Experience[]
  educations       Education[]
  skills           Skill[]
  InterviewSession InterviewSession[]

  @@map("cvs")
}

model Experience {
  id          String    @id @default(uuid())
  cvId        String
  companyName String
  role        String
  startDate   DateTime
  endDate     DateTime?
  description String

  cv CV @relation(fields: [cvId], references: [id])

  @@map("experiences")
}

model Education {
  id          String  @id @default(uuid())
  cvId        String
  institution String
  degree      String
  startYear   Int
  endYear     Int?
  CV          CV?     @relation(fields: [cVId], references: [id])
  cVId        String?

  @@map("educations")
}

model Skill {
  id    String     @id @default(uuid())
  cvId  String
  name  String
  level SkillLevel

  cv CV @relation(fields: [cvId], references: [id])

  @@map("skills")
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model InterviewSession {
  id              String   @id @default(uuid())
  userId          String
  cvId            String
  positionApplied String
  score           Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  answers InterviewAnswer[]

  user User @relation(fields: [userId], references: [id])
  cv   CV   @relation(fields: [cvId], references: [id])

  @@map("interview_sessions")
}

model InterviewAnswer {
  id        String           @id @default(uuid())
  session   InterviewSession @relation(fields: [sessionId], references: [id])
  sessionId String
  question  String
  answer    String
  feedback  String
  score     Float?

  @@map("interview_answers")
}
